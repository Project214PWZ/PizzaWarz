<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canTurn = true;


randomize();
if(position_meeting(x,y,object_Intersection))
{

if(image_angle == 0 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        //heading north ,turning west(left) ----outer --lane will change
                image_angle = 90;
                if(object_RandomVehicleMovement.lane = 130)
                {
                    object_RandomVehicleMovement.lane = 78;
                }
                else if(object_RandomVehicleMovement.lane = 182)
                {
                    object_RandomVehicleMovement.lane = 26;
                }
                 
                
    }
    else if(intTurn == 1){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading north ,turning east(right) --same lane
        image_angle = 270;

    }
}
else if(image_angle == 90 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading west(left) ,turning south ---outer ---lane will change
        image_angle = 180;
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                }        
    }
}
else if(image_angle == 270 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    //heading east(right) ,turning south  ---outer ---same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 180;
    }
}
else if(image_angle == 90){
    intTurn = irandom(1);
    //heading west(left) ,turning north ---outer lower lane -- same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 0;
   
    }
}
else if(image_angle == 180){
    intTurn = irandom(1);
        //heading south ,turning west(left)----same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 90;
    }
    else if(intTurn == 1){
    //heading south ,turning east(right) ----inner lane and rightmost outer lane --lane will change
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 270;
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                } 

    }
}
else if(image_angle == 270){
    intTurn = irandom(1);
    //heading east(right) ,turning north    
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 0;
                if(object_RandomVehicleMovement.lane = 130)
                {
                    object_RandomVehicleMovement.lane = 78;
                }
                else if(object_RandomVehicleMovement.lane = 182)
                {
                    object_RandomVehicleMovement.lane = 26;
                }   

    }
}
        //nothing happen vehicle doesn't turn
        canTurn = false;
        alarm[0]= 30;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canCollide = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canCollide = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

alarm[2] = 20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
randomize();
lane = global.carLane;
//intersect = collision_line(x,y,x,y-10,object_RandomVehicleMovement,false,false);
//if (intersect &amp;lt; 0)
//{
//show_message("object_RandomVehicleMovement");
//x = x -30;


//}

//if ( collision_circle(x,y,30,object_PlayerVehicle,false,true))
//{
//x = x+52;
//}



if(position_meeting(x,y,object_Intersection))
{

if(image_angle == 0 ){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        //heading north ,turning west(left) ----outer --lane will change
                image_angle = 90;
                direction = 180;
                y = 78;
                //show_message(object_RandomVehicleMovement.lane);
                //direction = image_angle;
                //direction = 90;   
                //image_angle = direction;
               /* image_speed = 0.5;
                //direction += 2.5;
                */
                /*
                if(lane == 130)
                {
                    y = 78;
                    hLane = 78;
                }
                else if(lane == 182)
                {
                    y = 26;
                    hLane = 26;
                }
              if(collision_line(0,y,8648,y,object_RandomVehicleMovement,false,true))
              {
                    y = y + 52;
                    hspeed= -10;
              }   
                
    }
    else if(intTurn == 1){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading north ,turning east(right) --same lane
        //direction = 0;
 
        image_angle = 270       //image_angle = direction;
        direction = 0;
       y = 182;
        //show_message(object_RandomVehicleMovement.lane);
        //direction = image_angle;
               // image_speed = 0.5;
                //direction += 2.5;
                if(lane == 130)
                {
                y = 130;
                hlane = 130;
                }
                else if(lane == 182)
                {
                    y = 182;
                    hLane = 182;
                }
             if(collision_line(0,y,8648,y,object_RandomVehicleMovement,false,true))
              {
                    y = y + 52;
                    hspeed= 10;
              }  
    }
}

/*
else if(image_angle == 90 &amp;amp;&amp;amp; y &amp;lt; 208){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading west(left) ,turning south ---outer ---lane will change
        direction = 180;
        image_speed = 0.5;
               // direction += 2.5;
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                }        
    }
}

else if(image_angle == 270 &amp;amp;&amp;amp; y &amp;lt; 208){
    intTurn = irandom(1);
    //heading east(right) ,turning south  ---outer ---same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 180;
        image_speed = 0.5;
                //direction += 2.5;
    }
}
else if(image_angle == 90){
    intTurn = irandom(1);
    //heading west(left) ,turning north ---outer lower lane -- same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 0;
        image_speed = 0.5;
                //direction += 2.5;
   
    }
}
*/

/*
else if(image_angle == 180){
    intTurn = irandom(1);
        //heading south ,turning west(left)----same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        direction = 180;
        image_angle = direction;
        //image_speed = 0.5;
                //direction += 2.5;
    }
    else if(intTurn == 1){
    //heading south ,turning east(right) ----inner lane and rightmost outer lane --lane will change
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        direction = 0;
        image_angle = direction;
        //image_speed = 0.5;
                
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                } 

    }
}
/*
else if(image_angle == 270){
    intTurn = irandom(1);
    //heading east(right) ,turning north    
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        direction = 0;
        image_speed = 0.5;
                //direction += 2.5;
                if(object_RandomVehicleMovement.lane = 130)
                {
                    object_RandomVehicleMovement.lane = 78;
                }
                else if(object_RandomVehicleMovement.lane = 182)
                {
                    object_RandomVehicleMovement.lane = 26;
                }   

    }
}
*/
/*
        //nothing happen vehicle doesn't turn
        canTurn = false;
        alarm[0]= 30;
}
//if(collision_circle(x,y,30,object_RandomVehicleMovement,false,true))
if(position_meeting(x,y,object_RandomVehicleMovement)){
//{
//show_message(image_angle);
//show_message(y);
/*
    if(image_angle == 0)
    {

        x = object_RandomVehicleMovement.x +52;
        vspeed = -10;

        
    }
    else if (image_angle == 180)
    {
    x = object_RandomVehicleMovement.x +52;
    vspeed = 10;
    
    }
    */
    /*
    if(image_angle == 90)
    {
    y = 26;
    hspeed= -10;
    }
    else if(image_angle == 270)
    {
     y = 78;
     hspeed = 10;
    }
    
    else if(image_angle == 0)
    {
        x = x -52;
        vspeed= -10;
        /*
     if(lane == 130)
     {
        if(place_free(x+52,y))
        {
        x = 182;
        vspeed= -10;
        }
        else
        {
        instance_destroy();
        }
     }
     else if(lane == 182)
     {
        if(place_free(x-52,y))
        {
        x = 130;
        vspeed= -10;
        }
        else
        {
        instance_destroy();
        }
     }
     
     vspeed = -10;
     */
     /*
    }
    else if(image_angle == 180)
    {
            x = x + 52;
        vspeed= 10;
     /*if(lane == 26)
     {
        if(place_free(x+52,y))
        {
        x = 78;
        vspeed= 10;
        }
        else
        {
        instance_destroy();
        }
     }
     else if(lane == 78)
     {
        if(place_free(x-52,y))
        {
        x = 26;
        vspeed= 10;
        }
        else
        {
        instance_destroy();
        }
     }
     
     vspeed = 10;
    }
    */
    /*
}
if(image_angle == 90)
{
hspeed= -10;
}
else if(image_angle == 270)
{
     hspeed = 10;
}

else if(image_angle == 0)
{
vspeed= -10;
}

else if(image_angle == 180)
{
     vspeed = 10;
}



}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_Intersection">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
number = irandom(1);

up = 0;
left = 90;
down = 180;
right = 270;
//Make them all else if statements
if(canCollide == true){
//Going up
//Right turn
if(image_angle == 0 &amp;&amp; number == 1){
    image_angle = 270;   
    direction = 0; 
    vspeed = 0;
    hspeed = 10;
    show_debug_message("Going up - turning right");
}
//Left turn
else{
    image_angle = 90;
    direction = 180;
    vspeed = 0;
    hspeed = -10;    
    show_debug_message("Going up - turning left");
}
//Going down
//Right turn
if(image_angle == 180 &amp;&amp; number == 1){
    image_angle = 270;
    direction = 0;
    vspeed = 0;
    hspeed = 10;
    show_debug_message("Going down - turning right");
}
//Left turn
else{
    image_angle = 90;
    direction = 180;
    vspeed = 0;
    hspeed = -10;
    show_debug_message("Going down - turning left");
}
//Heading left
//Turning down
if(image_angle == 90 &amp;&amp; y &lt; 1000){
    image_angle = 180;
    direction = 270;
    vspeed = 10;
    hspeed = 0;
    show_debug_message("Going left - turning down");
}
//Turning up
else if(image_angle == 90 &amp;&amp; y &gt; 7000){
    image_angle = 0;
    direction = 90;
    vspeed = -10;
    hspeed = 0;
    show_debug_message("Going left - turning up");
}
//Heading right
//Turning down
if(image_angle == 270 &amp;&amp; y &lt; 1000){
    image_angle = 180;
    direction = 270;
    vspeed = 10;
    hspeed = 0;
    show_debug_message("Going right - turning down");
}
//Turning up
else if(image_angle == 270 &amp;&amp; y &gt; 7000){
    image_angle = 0;
    direction = 90;
    vspeed = -10;
    hspeed = 0;
    show_debug_message("Going right - turning up");
}
canCollide = false;
show_debug_message("***********************");

}
alarm[2] = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_BlockParent">
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>000010000</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_RandomVehicleMovement">
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>000010000</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
