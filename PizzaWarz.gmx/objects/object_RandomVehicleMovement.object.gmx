<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yy;
var xx;



canTurn = true;
goingUpTurnRight = false;
goingUpTurnleft = false;

goingDownTurnRight = false;
goingDownTurnLeft = false;

goingLeftTurnUp = false;
goingLeftTurnDown = false;

goingRightTurnUp = false;
goingRightTurnDown = false;







randomize();
if(position_meeting(x,y,object_Intersection))
{

if(image_angle == 0 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        //heading north ,turning west(left) ----outer --lane will change
                image_angle = 90;
                if(object_RandomVehicleMovement.lane = 130)
                {
                    object_RandomVehicleMovement.lane = 78;
                }
                else if(object_RandomVehicleMovement.lane = 182)
                {
                    object_RandomVehicleMovement.lane = 26;
                }
                 
                
    }
    else if(intTurn == 1){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading north ,turning east(right) --same lane
        image_angle = 270;

    }
}
else if(image_angle == 90 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
                //heading west(left) ,turning south ---outer ---lane will change
        image_angle = 180;
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                }        
    }
}
else if(image_angle == 270 &amp;&amp; y &lt; 500){
    intTurn = irandom(1);
    //heading east(right) ,turning south  ---outer ---same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 180;
    }
}
else if(image_angle == 90){
    intTurn = irandom(1);
    //heading west(left) ,turning north ---outer lower lane -- same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 0;
   
    }
}
else if(image_angle == 180){
    intTurn = irandom(1);
        //heading south ,turning west(left)----same lane
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 90;
    }
    else if(intTurn == 1){
    //heading south ,turning east(right) ----inner lane and rightmost outer lane --lane will change
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 270;
                if(object_RandomVehicleMovement.lane = 78)
                {
                    object_RandomVehicleMovement.lane = 130;
                }
                else if(object_RandomVehicleMovement.lane = 26)
                {
                    object_RandomVehicleMovement.lane = 182;
                } 

    }
}
else if(image_angle == 270){
    intTurn = irandom(1);
    //heading east(right) ,turning north    
    if(intTurn == 0){
        //need to set alarm so that it doesn't turn again until next intersection
        //need to incorporate what lane it was in and put it back in that lane
        image_angle = 0;
                if(object_RandomVehicleMovement.lane = 130)
                {
                    object_RandomVehicleMovement.lane = 78;
                }
                else if(object_RandomVehicleMovement.lane = 182)
                {
                    object_RandomVehicleMovement.lane = 26;
                }   

    }
}
        //nothing happen vehicle doesn't turn
        canTurn = false;
        alarm[0]= 30;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xx;
canCollide = true;
show_debug_message("Alarm 3: x=xx " + string(x)); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = yy;
canCollide = true;
show_debug_message("Alarm 2: y=yy " + string(y)); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Kevin's epic spaceship: " + string(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_Intersection">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
randomize();
turningDirection = irandom(1);
show_debug_message("Before turn Y coord: " + string(y));

//Make them all else if statements
if(canCollide == true){
canCollide = false;

//Going up
//Right turn
if(image_angle == 0 &amp;&amp; turningDirection == 1){ 
    vspeed = -5;
    if(lane == 182){       
        image_angle = 270;           
        vspeed = 0;
        hspeed = 10;    
        yy = 182;      
                         
    }
    else if(lane == 130){        
        image_angle = 270;
        vspeed = 0;
        hspeed = 10;
        yy = 130;  
        show_debug_message("In IF: " + string(yy));               
    }    
    alarm[2] = 10;
    
    show_debug_message("Out of IF: " + string(y));    
    show_debug_message("Going up - turning right");
}
//Left turn
else if(image_angle == 0 &amp;&amp; turningDirection != 1){
    vspeed = -5;
    if(lane == 130){        
        image_angle = 90;
        vspeed = 0;
        hspeed = -10;    
        yy = 78;             
    }
    else if(lane == 182){        
        image_angle = 90;
        vspeed = 0;
        hspeed = -10;   
        yy = 26;                  
    }  
    alarm[2] = 10; 
    show_debug_message(y);  
    show_debug_message("Going up - turning left");
}
//Going down
//Right turn
else if(image_angle == 180 &amp;&amp; turningDirection == 1){
vspeed = 5;
    if(lane == 26){        
        image_angle = 270;
        vspeed = 0;
        hspeed = 10;
        yy = 8807;
    }
    else if(lane == 78){        
        image_angle = 270;
        vspeed = 0;
        hspeed = 10;
        yy = 8755;
    }
    alarm[2] = 10;
    show_debug_message("Going down - turning right");
}
//Left turn
else if(image_angle == 180 &amp;&amp; turningDirection != 1 ){
vspeed = 5;
    if(lane == 78){        
        image_angle = 90;
        vspeed = 0;
        hspeed = -10;
        yy = 8703;
    }
    else if(lane == 26){        
        image_angle = 90;
        vspeed = 0;
        hspeed = -10;
        yy = 8651;
    }
    alarm[2] = 10;
    show_debug_message("Going down - turning left");
}
//Heading left
//Turning down
else if(image_angle == 90 &amp;&amp; y &lt; 1000){   
        image_angle = 180;        
        vspeed = 10;
        hspeed = 0;
        xx = x - lane;    
        alarm[3] = 10;
        show_debug_message("Going left - turning down");
}
//Turning up
else if(image_angle == 90 &amp;&amp; y &gt; 7000){   
        image_angle = 0;       
        vspeed = -10;
        hspeed = 0;
        xx = x - lane;
        alarm[3] = 10;    
        show_debug_message("Going left - turning up");
}
//Heading right
//Turning down
else if(image_angle == 270 &amp;&amp; y &lt; 1000){
    image_angle = 180;
    vspeed = 10;
    hspeed = 0;
    xx = x + lane;
    alarm[3] = 10;
    show_debug_message("Going right - turning down");
}
//Turning up
else if(image_angle == 270 &amp;&amp; y &gt; 7000){
    image_angle = 0;
    vspeed = -10;
    hspeed = 0;
    xx = x + lane;
    alarm[3] = 10;
    show_debug_message("Going right - turning up");
}

show_debug_message("***********************");
//Re-enable collision
//alarm[2] = 10;

}






/*Step event
if(goingUpTurnRight == true){
    if(lane == 182){  
        if(y == 182){
            image_angle = 270;           
            vspeed = 0;
            hspeed = 10;  
            goingUpTurnRight = false;         
        }                                
    }
    else if(lane == 130){
        if(y == 130){           
            image_angle = 270;
            vspeed = 0;
            hspeed = 10; 
            goingUpTurnRight = false;         
        }                      
    }
}


*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_BlockParent">
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>000010000</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_RandomVehicleMovement">
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>000010000</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
