<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

WIDTH = window_get_width();
HEIGHT = window_get_height();


//the size of the minimap, may need to change to xSize and ySize if using rectangular map
mapSize = 200;
//scaling the the full map to fit into the minimap
mapScale = 200/2600; //room_width;
//Draws the map to scale
mapSurface = surface_create(mapSize, mapSize);
initiateSurface = 1;

draw_gui_mode = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stop view from going outside room
if view_xview &lt; 0 view_xview = 0;
if view_xview + view_wview &gt; room_width view_xview = room_width - view_wview;
if view_yview &lt; 0 view_yview = 0;
if view_yview + view_hview &gt; room_height view_yview = room_height - view_hview;

if(global.bolCount == true)
{
    global.intSeconds -= 1/room_speed;
    if(global.intPizzaTimer != 0){
        global.intPizzaTimer -= 1/room_speed;
    }
}
if(global.intSeconds &gt; 0) and (global.intSeconds &lt; 0.1)
{
    counter = 0;
    if(global.intMinutes = 0 and counter = 0){
        scriptEndGame();
        counter++;
    }
    else{
        global.intMinutes -= 1;
        global.intSeconds = 60;
    }
}
if(global.intPizzaTimer &lt;= 0)
{
    global.intPizzaTimer = 0;
}
if(global.intHealth == 0){
    //death sound;
    scriptEndGame();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_gui_mode += 1;
if(draw_gui_mode == 2){
    draw_gui_mode = 0;

}

var mapLeft = WIDTH - mapSize;
var mapTop = HEIGHT - mapSize;
var intSingleSeconds = floor(global.intSeconds);
/*
if surface_exists(mapSurface)
{
    
    draw_surface(mapSurface,mapLeft,mapTop);
}
else
{
    mapSurface = surface_create(mapSize, mapSize);
    initiateSurface = 1;
}
*/
font_add_sprite(sprite_FontSize_9,36,false,1);
//draws the players total cash
draw_set_font(sprite_FontSize_9);
draw_text_colour(20,HEIGHT-107,"$" + string(global.intScore),c_white, c_orange, c_white, c_orange,1);
//draw_text_colour(20,HEIGHT-147,string(global.intPlayerSpeed),c_white, c_purple, c_white, c_purple,1);

//draws the 5 minute timer for level
if(global.intSeconds&lt;10)
{
    draw_text_colour((WIDTH/2)-25,20,string(global.intMinutes) + ":0" + string(intSingleSeconds),c_white, c_orange, c_white, c_orange,1);      
}
else
{
    draw_text_colour((WIDTH/2)-25,20,string(global.intMinutes) + ":" + string(intSingleSeconds),c_white, c_orange, c_white, c_orange,1);
}//intPizzasToDeliver
var offset_x = 50;
var offset_y = 50;

//show_debug_message(draw_gui_mode);

    //DELIVERY ARROW
    if(global.intPizzasToDeliver != 0){
    //Draw Direction arrow    
        xx=view_xview[0]+offset_x;
        yy=view_yview[0]+offset_y;
        if(instance_exists(object_DeliveryPointer)){
            with(object_DeliveryPointer){
                instance_destroy();
        }
            instance_create(xx,yy,object_DeliveryPointer);
        }
        else{
            instance_create(xx,yy,object_DeliveryPointer);
        }
    }
    else{
        with(object_DeliveryPointer){
            instance_destroy();
        }
    }
    
//draws the healthbar
draw_healthbar(10, HEIGHT-15, 60, HEIGHT-45, global.intHealth, c_gray, c_red, c_blue, 0, true, true);

/*

//draw the view rectangle on the minimap
surface_set_target(mapSurface);
//draw_clear(c_black);
draw_background_tiled_ext(background_index[0],0,0,mapScale,mapScale,c_white,1);
with(object_Enviroment)
{
    draw_sprite_ext(sprite_index, 0, x*other.mapScale, y*other.mapScale, other.mapScale, other.mapScale, image_angle, image_blend, image_alpha);
}
surface_reset_target();

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(initiateSurface == 1){
    surface_set_target(mapSurface);
    draw_background_tiled_ext(background_index[0],0,0,mapScale,mapScale,c_white,1);       
    surface_reset_target();
    initiateSurface = 0;
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
